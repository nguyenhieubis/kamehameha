<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/13/2020 9:15:13 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="EZALOR"
  DTS:CreatorName="EZALOR\nguye"
  DTS:DTSID="{AA4E8D3C-E726-4D53-9DAE-784D143000F4}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.170"
  DTS:LocaleID="1033"
  DTS:ObjectName="ExecutionDataPipelines"
  DTS:PackageType="5"
  DTS:VersionBuild="32"
  DTS:VersionGUID="{406EF061-5F33-4ABB-826F-39024DCAE063}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task Execution Data Pipelines"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{97D8EFC5-8B58-4532-975E-FD7BEDE0E483}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task Execution Data Pipelines"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_1221ebfdfde446e59c2196df9fe34b80"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="$Project::BATCH_TYPE,$Project::COLLECTION_TYPES,$Project::LOAD_TYPE,$Project::Decryption_Key,$Project::Manual_Start_Date,$Project::EmailFrom,$Project::EmailFrom_Password,$Project::EmailFrom_PortNumber,$Project::EmailFrom_SMTPAddress,$Project::EmailTo,$Project::Is_Parallel">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1221ebfdfde446e59c2196df9fe34b80.Properties.Settings.get_Default():ST_1221ebfdfde446e59c2196df9fe34b80.Properties.Sett" +
    "ings")]

namespace ST_1221ebfdfde446e59c2196df9fe34b80.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
using kamehameha;
#endregion

namespace ST_1221ebfdfde446e59c2196df9fe34b80
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // Result flag of Script Task
            bool script_task_is_successful = true;

            int flag = 0;
            string email_from = Dts.Variables["EmailFrom"].Value.ToString();
            string email_from_password = Dts.Variables["EmailFrom_Password"].GetSensitiveValue().ToString();
            int email_from_port_number = (int)Dts.Variables["EmailFrom_PortNumber"].Value;
            string email_from_smtp_address = Dts.Variables["EmailFrom_SMTPAddress"].Value.ToString();
            string email_to = Dts.Variables["EmailTo"].Value.ToString();
            string mail_subject = "SSIS Run Failed";
            string mail_body = "Please contact SSIS Team if have any questions." + "\n" +
                    "Thank you" + "\n" +
                    "Hieu Do Bui Nguyen (Mr)";

            try
            {
                // ADO.NET connection Staging
                SqlConnection ETLMaster_ADONET = new SqlConnection();
                ETLMaster_ADONET = (SqlConnection)(Dts.Connections["ETLMaster_ADONET"].AcquireConnection(Dts.Transaction) as SqlConnection);

                // TODO: Add your code here
                string batch_type = Dts.Variables["BATCH_TYPE"].Value.ToString();
                string collection_types = Dts.Variables["COLLECTION_TYPES"].Value.ToString();
                int load_type = (int)Dts.Variables["LOAD_TYPE"].Value;
                string decryption_key = Dts.Variables["Decryption_Key"].GetSensitiveValue().ToString();
                DateTime manual_start_date = (DateTime)Dts.Variables["Manual_Start_Date"].Value;
                bool is_parallel = (bool)Dts.Variables["Is_Parallel"].Value;

                flag = 1;
                string connection_string = ETLMaster.ETL_GetConnectionETLMaster(ETLMaster_ADONET, decryption_key);

                flag = 2;
                DateTime new_watermark_value = DateTime.Now;
                ETLMaster etl_master = new ETLMaster(connection_string, batch_type, collection_types, decryption_key, new_watermark_value, load_type, manual_start_date);

                // Check if batch_type is running?
                if (!etl_master.ETL_CheckBatchIsRunning())
                {
                    try
                    {
                        // Create BatchID
                        etl_master.ETL_GetBatchID();
                        etl_master.ETL_LoadDataSource2Destination(is_parallel);
                    }
                    finally
                    {
                        etl_master.ETL_UpdateBatchID();
                        if (etl_master.ETL_CheckBatchIsFailed())
                        {
                            script_task_is_successful = false;
                            string error_description = etl_master.ETL_GetErrorDescription();
                            mail_subject = mail_subject + " || BATCH_TYPE: " + etl_master.Batch_Type + " || COLLECTION_TYPES: " + etl_master.Collection_Types;
                            mail_body = "Hi Team," + "\n" +
                                "Load data source to destination has failed." + "\n" +
                                "BATCH_TYPE: " + etl_master.Batch_Type + "\n" +
                                "COLLECTION_TYPES: " + etl_master.Collection_Types + "\n" +
                                "Error Time: " + DateTime.Now.ToString() + "\n" +
                                "BatchID: " + etl_master.Batch_ID.ToString() + "\n" +
                                "Description:" + error_description + "\n" +
                                mail_body;
                            ETLMaster.SendMailWhenFailed(email_from, email_from_password, email_from_smtp_address, email_from_port_number, email_to, mail_subject, mail_body);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                script_task_is_successful = false;

                string code, description;
                switch (flag)
                {
                    case 0:
                        code = "Get parameters value failed.";
                        break;
                    case 1:
                        code = "Get connection string ETLMaster failed.";
                        break;
                    case 2:
                        code = "kamehameha error.";
                        break;
                    default:
                        code = "Unknown.";
                        break;
                }
                description = code + "\nStackTrace:" + e.StackTrace + ".\nMessage: " + e.Message.ToString() + e.HelpLink;
                mail_subject = mail_subject + " || Source: " + e.Source;
                mail_body = "Hi Team," + "\n" +
                    "Execution the package has failed." + "\n" +
                    "Error Time: " + DateTime.Now.ToString() + "\n" +
                    "Description:" + description + "\n\n" +
                    mail_body;
                ETLMaster.SendMailWhenFailed(email_from, email_from_password, email_from_smtp_address, email_from_port_number, email_to, mail_subject, mail_body);
            }

            // Status of Script Task
            if (script_task_is_successful)
            {
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            else
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_1221ebfdfde446e59c2196df9fe34b80.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{46617153-1C9C-4955-9DF6-E10498238137}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_1221ebfdfde446e59c2196df9fe34b80</RootNamespace>
    <AssemblyName>ST_1221ebfdfde446e59c2196df9fe34b80</AssemblyName>
    <TargetFrameworkVersion>v4.5.2</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="kamehameha">
      <HintPath>D:\GitHub\kamehameha\src\kamehameha\kamehameha\bin\Debug\kamehameha.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_1221ebfdfde446e59c2196df9fe34b80</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_1221ebfdfde446e59c2196df9fe34b80</msb:DisplayName>
    <msb:ProjectId>{756E90DD-283C-4F59-B31E-0A528073C520}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_1221ebfdfde446e59c2196df9fe34b80.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_1221ebfdfde446e59c2196df9fe34b80")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_1221ebfdfde446e59c2196df9fe34b80")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1221ebfdfde446e59c2196df9fe34b80.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1221ebfdfde446e59c2196df9fe34b80.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_1221ebfdfde446e59c2196df9fe34b80.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_1221ebfdfde446e59c2196df9fe34b80.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_1221ebfdfde446e59c2196df9fe34b80.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_1221ebfdfde446e59c2196df9fe34b80.dll">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
eAwAAHQFAAAjVVMA7BEAABAAAAAjR1VJRAAAAPwRAAD0AQAAI0Jsb2IAAAAAAAAAAgAAAVcdogkJ
AwAAAPoBMwAWAAABAAAAJwAAAAUAAAAGAAAACQAAAAEAAAA3AAAAAgAAABAAAAABAAAAAgAAAAMA
AAAEAAAAAQAAAAEAAAAGAAAAAQAAAAEAAAAAAGUEAQAAAAAABgDeAtsFBgBtA9sFBgAqAsgFDwBP
BgAABgBXAhoFBgDBAhoFBgCiAhoFBgBUAxoFBgD+AhoFBgAXAxoFBgBuAhoFBgCJAsUDCgAyAxQE
CgCpARQEBgBBAZYEDgCxBZQABgBMBZYEBgCdBJYEBgANAsgFBgDuBpYEBgB+BfsFBgBuBfUEEgDd
AU8EEgA+Ak8EEgDFAeAEBgDyAdsFCgA9BBQEFgCRBkoBFgAUAUoBBgAwAJYEGgA+BRAHFgC9BkoB
FgCOBUoBBgCuBJYEBgAlAJYEBgDhA5YEBgB0AZYEBgAdAZYEBgAyBxoFAAAAADYAAAAAAAEAAQAB
ABAAtgQBADkAAQABAAAAEAACBl4GUQABAAMAAAEQALAGXgZlAAMABwADAQAA2QYAAEkABAAKABEA
ogTxABEAmQH1ABEA7QD5AAYGjAD9AFaAyQYAAVaAeQEAAVAgAAAAAIYAvAQGAAEAeCQAAAAAhhi7
BQYAAQCAJAAAAACDGLsFBgABAIgkAAAAAJMIegUEAQEAtCQAAAAAkwiBAQkBAQC7JAAAAACTCI0B
DgEBAMMkAAAAAJYI9QYUAQIAyiQAAAAAhhi7BQYAAgDSJAAAAACRGMEFGQECAAAAAQCnAwkAuwUB
ABEAuwUGABkAuwUKACkAuwUQADEAuwUQADkAuwUQAEEAuwUQAEkAuwUQAFEAuwUQAFkAuwUQAGEA
uwUQAGkAuwUGAJkAuwUGAMEAuwUVANEAuwUGAHEA0QY6ANkAjQY/AOEAjQREAOkAiwNKAKEA3wNO
AOkAlQNKAPkAuwUGANkAuQZSAAEBjQRYANkACgVKAAkBLAVfAIEAoAVkAHkAJgdrAAwAuwV4AIEA
uwV+AIEArQOQAIEAXgAGAIEAwQSUAIEATAAGAIEAxwCQAIEAVgVOAIEAagFOAIEAmwZOACEB5waZ
AHkA3wNOAIEAPwCfAPEA3wNOAIEAtACjAIkA3gBOAIkACAFOAIkA6ANOAIkA/QBOACEB5wauANkA
AQcBAHEAuwUGAKEAuwUGACkBLwG1ACkBLge+AKkAuwXEAMkAuwUGAAgAFADnAAgAGADsACkAcwBU
AS4ACwAsAS4AEwA1AS4AGwBUAS4AIwBdAS4AKwCGAS4AMwCGAS4AOwCGAS4AQwBdAS4ASwCMAS4A
UwCGAS4AWwCjAUMAYwDsAEkAcwBUAWEAewDsAGMAawDsABsAAwABAAQAAwAAAH4FHQEAAKEBIgEA
APkGJwECAAQAAwACAAUABQABAAYABQACAAcABwBwAASAAAABAAAArR9YQQAAAAAAAAEAAAAEAAAA
AAAAAAAAAADMAKsAAAAAAA4AAAAAAAAAAAAAANUA9QMAAAAAAQAAAAAAAAAAAAAA3gCUAAAAAAAE
AAAAAAAAAAAAAADMAJYEAAAAAA4AAAAAAAAAAAAAANUAbQAAAAAABAAAAAAAAAAAAAAAzACfAAAA
AAAAAAAAAQAAAAwGAAAFAAIAAAAAAABTVF8xMjIxZWJmZGZkZTQ0NmU1OWMyMTk2ZGY5ZmUzNGI4
MABOdWxsYWJsZWAxAEludDMyADxNb2R1bGU+AGdldF9CYXRjaF9JRABFVExfVXBkYXRlQmF0Y2hJ
RABFVExfR2V0QmF0Y2hJRABNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBr
YW1laGFtZWhhAFN5c3RlbS5EYXRhAG1zY29ybGliAFNlbmRNYWlsV2hlbkZhaWxlZABFVExfQ2hl
Y2tCYXRjaElzRmFpbGVkAGdldF9TdGFja1RyYWNlAGRlZmF1bHRJbnN0YW5jZQBnZXRfU291cmNl
AGdldF9NZXNzYWdlAFZhcmlhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxl
AERhdGVUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAZ2V0X0JhdGNoX1R5cGUA
RmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2Ny
aXB0T2JqZWN0TW9kZWxCYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAEVkaXRvckJyb3dzYWJs
ZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRy
aWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1i
bHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdv
cmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3Jp
cHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVBy
b2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tF
bnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0
aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAR2V0U2Vuc2l0aXZlVmFsdWUAdmFsdWUARVRMX0No
ZWNrQmF0Y2hJc1J1bm5pbmcAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0cmluZwBnZXRf
SGVscExpbmsATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVu
dE1vZGVsAFNUXzEyMjFlYmZkZmRlNDQ2ZTU5YzIxOTZkZjlmZTM0YjgwLmRsbABnZXRfSXRlbQBT
eXN0ZW0ARW51bQByZXNvdXJjZU1hbgBCb29sZWFuAFNjcmlwdE1haW4ARVRMX0xvYWREYXRhU291
cmNlMkRlc3RpbmF0aW9uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9u
AGdldF9UcmFuc2FjdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBBY3F1aXJlQ29ubmVjdGlvbgBTcWxD
b25uZWN0aW9uAEV4Y2VwdGlvbgBFVExfR2V0RXJyb3JEZXNjcmlwdGlvbgBDdWx0dXJlSW5mbwBn
ZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rpb25NYW5hZ2VyAEVUTF9HZXRDb25uZWN0aW9uRVRM
TWFzdGVyAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29t
cGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzEyMjFlYmZkZmRlNDQ2ZTU5YzIxOTZk
ZjlmZTM0YjgwLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBT
VF8xMjIxZWJmZGZkZTQ0NmU1OWMyMTk2ZGY5ZmUzNGI4MC5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJs
ZXMAZ2V0X0NvbGxlY3Rpb25fVHlwZXMAU2V0dGluZ3MAZ2V0X0Nvbm5lY3Rpb25zAFN1Y2Nlc3MA
Z2V0X0R0cwBTY3JpcHRSZXN1bHRzAENvbmNhdABPYmplY3QAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tS
ZXN1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AGdldF9Ob3cAZ2V0X0Fzc2VtYmx5AAAAE0UAbQBh
AGkAbABGAHIAbwBtAAAlRQBtAGEAaQBsAEYAcgBvAG0AXwBQAGEAcwBzAHcAbwByAGQAAClFAG0A
YQBpAGwARgByAG8AbQBfAFAAbwByAHQATgB1AG0AYgBlAHIAACtFAG0AYQBpAGwARgByAG8AbQBf
AFMATQBUAFAAQQBkAGQAcgBlAHMAcwAAD0UAbQBhAGkAbABUAG8AAB9TAFMASQBTACAAUgB1AG4A
IABGAGEAaQBsAGUAZAAAgKNQAGwAZQBhAHMAZQAgAGMAbwBuAHQAYQBjAHQAIABTAFMASQBTACAA
VABlAGEAbQAgAGkAZgAgAGgAYQB2AGUAIABhAG4AeQAgAHEAdQBlAHMAdABpAG8AbgBzAC4ACgBU
AGgAYQBuAGsAIAB5AG8AdQAKAEgAaQBlAHUAIABEAG8AIABCAHUAaQAgAE4AZwB1AHkAZQBuACAA
KABNAHIAKQAAIUUAVABMAE0AYQBzAHQAZQByAF8AQQBEAE8ATgBFAFQAABVCAEEAVABDAEgAXwBU
AFkAUABFAAAhQwBPAEwATABFAEMAVABJAE8ATgBfAFQAWQBQAEUAUwAAE0wATwBBAEQAXwBUAFkA
UABFAAAdRABlAGMAcgB5AHAAdABpAG8AbgBfAEsAZQB5AAAjTQBhAG4AdQBhAGwAXwBTAHQAYQBy
AHQAXwBEAGEAdABlAAAXSQBzAF8AUABhAHIAYQBsAGwAZQBsAAAhIAB8AHwAIABCAEEAVABDAEgA
XwBUAFkAUABFADoAIAAALSAAfAB8ACAAQwBPAEwATABFAEMAVABJAE8ATgBfAFQAWQBQAEUAUwA6
ACAAAICDSABpACAAVABlAGEAbQAsAAoATABvAGEAZAAgAGQAYQB0AGEAIABzAG8AdQByAGMAZQAg
AHQAbwAgAGQAZQBzAHQAaQBuAGEAdABpAG8AbgAgAGgAYQBzACAAZgBhAGkAbABlAGQALgAKAEIA
QQBUAEMASABfAFQAWQBQAEUAOgAgAAAnCgBDAE8ATABMAEUAQwBUAEkATwBOAF8AVABZAFAARQBT
ADoAIAAAGwoARQByAHIAbwByACAAVABpAG0AZQA6ACAAABUKAEIAYQB0AGMAaABJAEQAOgAgAAAb
CgBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AOgAAAwoAADlHAGUAdAAgAHAAYQByAGEAbQBlAHQAZQBy
AHMAIAB2AGEAbAB1AGUAIABmAGEAaQBsAGUAZAAuAABPRwBlAHQAIABjAG8AbgBuAGUAYwB0AGkA
bwBuACAAcwB0AHIAaQBuAGcAIABFAFQATABNAGEAcwB0AGUAcgAgAGYAYQBpAGwAZQBkAC4AACNr
AGEAbQBlAGgAYQBtAGUAaABhACAAZQByAHIAbwByAC4AABFVAG4AawBuAG8AdwBuAC4AABkKAFMA
dABhAGMAawBUAHIAYQBjAGUAOgAAFy4ACgBNAGUAcwBzAGEAZwBlADoAIAAAGSAAfAB8ACAAUwBv
AHUAcgBjAGUAOgAgAABvSABpACAAVABlAGEAbQAsAAoARQB4AGUAYwB1AHQAaQBvAG4AIAB0AGgA
ZQAgAHAAYQBjAGsAYQBnAGUAIABoAGEAcwAgAGYAYQBpAGwAZQBkAC4ACgBFAHIAcgBvAHIAIABU
AGkAbQBlADoAIAAABQoACgAAcVMAVABfADEAMgAyADEAZQBiAGYAZABmAGQAZQA0ADQANgBlADUA
OQBjADIAMQA5ADYAZABmADkAZgBlADMANABiADgAMAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBS
AGUAcwBvAHUAcgBjAGUAcwAAAAAAVh8LQUFTBkacH9JxsZpIjAAEIAEBCAMgAAEFIAEBEREEIAEB
DgUgAQERXR4HFwIIDg4IDg4ODg4OCA4RPQIRPRJBDhE9CBJFDg4EIAASbQQgABJxBSABEnUcAyAA
HAMgAA4FIAASgIEGIAESgIUcBCABHBwGAAIOEn0OBAAAET0HFRGAjQERPQUgAQETABEgBwEODg4O
ET0IFRGAjQERPQMgAAIEIAEBAgUAAQ4dDgMgAAgKAAcBDg4OCA4ODgYAAw4ODg4IAAESgJURgJkF
IAASgJ0HIAIBDhKAnQi3elxWGTTgiQiJhF3NgIDMkQgf98QNmx3V/gQAAAAABAEAAAADBhJVAwYS
WQMGEhACBggDBhEUBAAAElUEAAASWQUAAQESWQQAABIQAwAAAQQIABJVBAgAElkECAASEAgBAAgA
AAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfMTIyMWVi
ZmRmZGU0NDZlNTljMjE5NmRmOWZlMzRiODAAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMAAA
TQEAHC5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41LjIBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1l
FC5ORVQgRnJhbWV3b3JrIDQuNS4yAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2Vz
LlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRy
YWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50
aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAALA5AAAAAAAAAAAAAMo5AAAAIAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAC8OQAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxs
AAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAA
AFhAAAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAA
vQTv/gAAAQAAAAEAWEGtHwAAAQBYQa0fPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAAB
AFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAA
AAAAALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAw
ADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkA
TgBhAG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABT
AFQAXwAxADIAMgAxAGUAYgBmAGQAZgBkAGUANAA0ADYAZQA1ADkAYwAyADEAOQA2AGQAZgA5AGYA
ZQAzADQAYgA4ADAAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AOAAx
ADAAOQAuADEANgA3ADIAOAAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQA
XwAxADIAMgAxAGUAYgBmAGQAZgBkAGUANAA0ADYAZQA1ADkAYwAyADEAOQA2AGQAZgA5AGYAZQAz
ADQAYgA4ADAALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMA
bwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIAMAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBk
AGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0A
ZQAAAFMAVABfADEAMgAyADEAZQBiAGYAZABmAGQAZQA0ADQANgBlADUAOQBjADIAMQA5ADYAZABm
ADkAZgBlADMANABiADgAMAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAA
AABTAFQAXwAxADIAMgAxAGUAYgBmAGQAZgBkAGUANAA0ADYAZQA1ADkAYwAyADEAOQA2AGQAZgA5
AGYAZQAzADQAYgA4ADAAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADgAMQAwADkALgAxADYANwAyADgAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQBy
AHMAaQBvAG4AAAAxAC4AMAAuADgAMQAwADkALgAxADYANwAyADgAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAA3DkAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="248.8,41.6"
          Id="Package\Script Task Execution Data Pipelines"
          TopLeft="580,245" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>